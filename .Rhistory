test = "Wald",
object = elrmod)$pvalue,
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
# You can add more analyses here, returning a named vector:
return(c(
p_nhst = p_nhst,
p_iht = p_iht))
}
###-----------------------------------------------------------------------------
# Summarise
###-----------------------------------------------------------------------------
Summarise <- function(condition, results, fixed_objects) {
edr_nhst  <- mean(results[, "p_nhst"]  == 1, na.rm = TRUE)
edr_iht  <- mean(results[, "p_iht"]  == 1, na.rm = TRUE)
return(c(
EDR_NHST = edr_nhst,
EDR_IHT = edr_iht))
}
###-----------------------------------------------------------------------------
# Simulation
###-----------------------------------------------------------------------------
res <- runSimulation(design = Design,
replications = 5,
generate = Generate,
analyse = Analyse,
summarise = Summarise)
###-----------------------------------------------------------------------------
# simdesign: Simulation study
###-----------------------------------------------------------------------------
library(SimDesign)
source("Master Skript.R")
###-----------------------------------------------------------------------------
# Design
###-----------------------------------------------------------------------------
Design <- createDesign(
N = c(24, 60, 120, 240, 480),
true_hypothesis = c(0, 1),
small.effect = c(0, 1),
cutoff = c("regular", "unusual"),
hypothesis = "adjmean0 < adjmean1; adjmean1 < adjmean2"
)
###-----------------------------------------------------------------------------
# Generate
###-----------------------------------------------------------------------------
Generate <- function(condition, fixed_objects) {
data <- generateData(
N = condition$N,
hypothesis = condition$true_hypothesis,
small.effect = condition$small.effect
)
return(data)
}
###-----------------------------------------------------------------------------
# Analyse
###-----------------------------------------------------------------------------
Analyse <- function(condition, dat, fixed_objects) {
## NHST in ELR
elrmod <- elr_function(data = dat)
p_nhst <- p_value_decision(p_value = elrmod@results@hypotheses[1, "p-value"],
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## IHT in ELR
p_iht <- p_value_decision(p_value = effectLite_iht(
constraints = condition$hypothesis,
test = "Wald",
object = elrmod)$pvalue,
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
# You can add more analyses here, returning a named vector:
return(c(
p_nhst = p_nhst,
p_iht = p_iht))
}
###-----------------------------------------------------------------------------
# Summarise
###-----------------------------------------------------------------------------
Summarise <- function(condition, results, fixed_objects) {
edr_nhst  <- mean(results[, "p_nhst"]  == 1, na.rm = TRUE)
edr_iht  <- mean(results[, "p_iht"]  == 1, na.rm = TRUE)
return(c(
EDR_NHST = edr_nhst,
EDR_IHT = edr_iht))
}
###-----------------------------------------------------------------------------
# Simulation
###-----------------------------------------------------------------------------
res <- runSimulation(design = Design,
replications = 5,
generate = Generate,
analyse = Analyse,
summarise = Summarise)
###-----------------------------------------------------------------------------
# simdesign: Simulation study
###-----------------------------------------------------------------------------
library(SimDesign)
source("Master Skript.R")
###-----------------------------------------------------------------------------
# Design
###-----------------------------------------------------------------------------
Design <- createDesign(
N = c(24, 60, 120, 240, 480),
true_hypothesis = c(0, 1),
small.effect = c(0, 1),
cutoff = c("regular", "unusual"),
hypothesis = "adjmean0 < adjmean1; adjmean1 < adjmean2"
)
###-----------------------------------------------------------------------------
# Generate
###-----------------------------------------------------------------------------
Generate <- function(condition, fixed_objects) {
data <- generateData(
N = condition$N,
hypothesis = condition$true_hypothesis,
small.effect = condition$small.effect
)
return(data)
}
###-----------------------------------------------------------------------------
# Analyse
###-----------------------------------------------------------------------------
Analyse <- function(condition, dat, fixed_objects) {
## NHST in ELR
elrmod <- elr_function(data = dat)
p_nhst <- p_value_decision(p_value = elrmod@results@hypotheses[1, "p-value"],
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## IHT in ELR
p_iht <- p_value_decision(p_value = effectLite_iht(
constraints = condition$hypothesis,
test = "Wald",
object = elrmod)$pvalue,
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
# You can add more analyses here, returning a named vector:
return(c(
p_nhst = p_nhst,
p_iht = p_iht))
}
###-----------------------------------------------------------------------------
# Summarise
###-----------------------------------------------------------------------------
Summarise <- function(condition, results, fixed_objects) {
edr_nhst  <- mean(results[, "p_nhst"]  == 1, na.rm = TRUE)
edr_iht  <- mean(results[, "p_iht"]  == 1, na.rm = TRUE)
return(c(
EDR_NHST = edr_nhst,
EDR_IHT = edr_iht))
}
###-----------------------------------------------------------------------------
# Simulation
###-----------------------------------------------------------------------------
res <- runSimulation(design = Design,
replications = 5,
generate = Generate,
analyse = Analyse,
summarise = Summarise)
###-----------------------------------------------------------------------------
# simdesign: Simulation study
###-----------------------------------------------------------------------------
library(SimDesign)
source("Master Skript.R")
source("Data Generation.R")
source("elr_function.R")
source("EDR_function.R")
source("goric_preference function.R")
source("bain_function.R")
source("bain_preference function.R")
source("p_value_decision function.R")
###-----------------------------------------------------------------------------
# Design
###-----------------------------------------------------------------------------
Design <- createDesign(
N = c(24, 60, 120, 240, 480),
true_hypothesis = c(0, 1),
small.effect = c(0, 1),
cutoff = c("regular", "unusual"),
hypothesis = "adjmean0 < adjmean1; adjmean1 < adjmean2"
)
###-----------------------------------------------------------------------------
# Generate
###-----------------------------------------------------------------------------
Generate <- function(condition, fixed_objects) {
data <- generateData(
N = condition$N,
hypothesis = condition$true_hypothesis,
small.effect = condition$small.effect
)
return(data)
}
###-----------------------------------------------------------------------------
# Analyse
###-----------------------------------------------------------------------------
Analyse <- function(condition, dat, fixed_objects) {
## NHST in ELR
elrmod <- elr_function(data = dat)
p_nhst <- p_value_decision(p_value = elrmod@results@hypotheses[1, "p-value"],
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## IHT in ELR
p_iht <- p_value_decision(p_value = effectLite_iht(
constraints = condition$hypothesis,
test = "Wald",
object = elrmod)$pvalue,
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## GORIC(A)
parnames <- c("adjmean0","adjmean1","adjmean2")
est_AdjMeans <- elrmod@results@est[parnames]
VCOV_AdjMeans <- elrmod@results@vcov.def[parnames,parnames]
gorica_AdjMeans <- goric(est_AdjMeans, VCOV=VCOV_AdjMeans, hypotheses=list(H1=condition$hypothesis))
goric_decision <- goric_preference(gorica_AdjMeans, condition$true_hypothesis)
#returning a named vector:
return(c(
p_nhst = p_nhst,
p_iht = p_iht,
goric_iht = goric_decision))
}
###-----------------------------------------------------------------------------
# Summarise
###-----------------------------------------------------------------------------
Summarise <- function(condition, results, fixed_objects) {
edr_nhst  <- mean(results[, "p_nhst"]  == 1, na.rm = TRUE)
edr_iht  <- mean(results[, "p_iht"]  == 1, na.rm = TRUE)
edr_goric  <- mean(results[, "goric_iht"]  == 1, na.rm = TRUE)
return(c(
EDR_NHST = edr_nhst,
EDR_IHT = edr_iht,
EDR_GORIC = edr_goric))
}
###-----------------------------------------------------------------------------
# Simulation
###-----------------------------------------------------------------------------
res <- runSimulation(design = Design,
replications = 5,
generate = Generate,
analyse = Analyse,
summarise = Summarise)
View(res)
###-----------------------------------------------------------------------------
# simdesign: Simulation study
###-----------------------------------------------------------------------------
library(SimDesign)
source("Master Skript.R")
source("Data Generation.R")
source("elr_function.R")
source("EDR_function.R")
source("goric_preference function.R")
source("bain_function.R")
source("bain_preference function.R")
source("p_value_decision function.R")
###-----------------------------------------------------------------------------
# Design
###-----------------------------------------------------------------------------
Design <- createDesign(
N = c(24, 60, 120, 240, 480),
true_hypothesis = c(0, 1),
small.effect = c(0, 1),
cutoff = c("regular", "unusual"),
hypothesis = "adjmean0 < adjmean1; adjmean1 < adjmean2"
)
###-----------------------------------------------------------------------------
# Generate
###-----------------------------------------------------------------------------
Generate <- function(condition, fixed_objects) {
data <- generateData(
N = condition$N,
hypothesis = condition$true_hypothesis,
small.effect = condition$small.effect
)
return(data)
}
###-----------------------------------------------------------------------------
# Analyse
###-----------------------------------------------------------------------------
Analyse <- function(condition, dat, fixed_objects) {
## NHST in ELR
elrmod <- elr_function(data = dat)
p_nhst <- p_value_decision(p_value = elrmod@results@hypotheses[1, "p-value"],
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## IHT in ELR
p_iht <- p_value_decision(p_value = effectLite_iht(
constraints = condition$hypothesis,
test = "Wald",
object = elrmod)$pvalue,
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## GORIC(A)
parnames <- c("adjmean0","adjmean1","adjmean2")
est_AdjMeans <- elrmod@results@est[parnames]
VCOV_AdjMeans <- elrmod@results@vcov.def[parnames,parnames]
gorica_AdjMeans <- goric(est_AdjMeans,
VCOV=VCOV_AdjMeans,
hypotheses=list(H1=condition$hypothesis))
goric_decision <- goric_preference(gorica_AdjMeans, condition$true_hypothesis)
## bain
bain_AdjMeans <- bain_function(est_AdjMeans = est_AdjMeans,
VCOV_AdjMeans=VCOV_AdjMeans,
hypothesis = condition$hypothesis,
n = condition$N)
bain_decision <- bain_preference(bain_AdjMeans, condition$true_hypothesis)
#returning a named vector:
return(c(
p_nhst = p_nhst,
p_iht = p_iht,
goric_iht = goric_decision))
}
###-----------------------------------------------------------------------------
# Summarise
###-----------------------------------------------------------------------------
Summarise <- function(condition, results, fixed_objects) {
edr_nhst  <- mean(results[, "p_nhst"]  == 1, na.rm = TRUE)
edr_iht  <- mean(results[, "p_iht"]  == 1, na.rm = TRUE)
edr_goric  <- mean(results[, "goric_iht"]  == 1, na.rm = TRUE)
return(c(
EDR_NHST = edr_nhst,
EDR_IHT = edr_iht,
EDR_GORIC = edr_goric))
}
###-----------------------------------------------------------------------------
# Simulation
###-----------------------------------------------------------------------------
res <- runSimulation(design = Design,
replications = 5,
generate = Generate,
analyse = Analyse,
summarise = Summarise)
###-----------------------------------------------------------------------------
# simdesign: Simulation study
###-----------------------------------------------------------------------------
library(SimDesign)
source("Master Skript.R")
source("Data Generation.R")
source("elr_function.R")
source("EDR_function.R")
source("goric_preference function.R")
source("bain_function.R")
source("bain_preference function.R")
source("p_value_decision function.R")
###-----------------------------------------------------------------------------
# Design
###-----------------------------------------------------------------------------
Design <- createDesign(
N = c(24, 60, 120, 240, 480),
true_hypothesis = c(0, 1),
small.effect = c(0, 1),
cutoff = c("regular", "unusual"),
hypothesis = "adjmean0 < adjmean1; adjmean1 < adjmean2"
)
###-----------------------------------------------------------------------------
# Generate
###-----------------------------------------------------------------------------
Generate <- function(condition, fixed_objects) {
data <- generateData(
N = condition$N,
hypothesis = condition$true_hypothesis,
small.effect = condition$small.effect
)
return(data)
}
###-----------------------------------------------------------------------------
# Analyse
###-----------------------------------------------------------------------------
Analyse <- function(condition, dat, fixed_objects) {
## NHST in ELR
elrmod <- elr_function(data = dat)
p_nhst <- p_value_decision(p_value = elrmod@results@hypotheses[1, "p-value"],
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## IHT in ELR
p_iht <- p_value_decision(p_value = effectLite_iht(
constraints = condition$hypothesis,
test = "Wald",
object = elrmod)$pvalue,
true_hypothesis = condition$true_hypothesis,
cutoff = condition$cutoff)
## GORIC(A)
parnames <- c("adjmean0","adjmean1","adjmean2")
est_AdjMeans <- elrmod@results@est[parnames]
VCOV_AdjMeans <- elrmod@results@vcov.def[parnames,parnames]
gorica_AdjMeans <- goric(est_AdjMeans,
VCOV=VCOV_AdjMeans,
hypotheses=list(H1=condition$hypothesis))
goric_decision <- goric_preference(gorica_AdjMeans, condition$true_hypothesis)
## bain
bain_AdjMeans <- bain_function(est_AdjMeans = est_AdjMeans,
VCOV_AdjMeans=VCOV_AdjMeans,
hypothesis = condition$hypothesis,
n = condition$N)
bain_decision <- bain_preference(bain_AdjMeans, condition$true_hypothesis)
#returning a named vector:
return(c(
p_nhst = p_nhst,
p_iht = p_iht,
goric_iht = goric_decision,
bain_iht = bain_decision))
}
###-----------------------------------------------------------------------------
# Summarise
###-----------------------------------------------------------------------------
Summarise <- function(condition, results, fixed_objects) {
edr_nhst  <- mean(results[, "p_nhst"]  == 1, na.rm = TRUE)
edr_iht  <- mean(results[, "p_iht"]  == 1, na.rm = TRUE)
edr_goric  <- mean(results[, "goric_iht"]  == 1, na.rm = TRUE)
edr_bain  <- mean(results[, "bain_iht"]  == 1, na.rm = TRUE)
return(c(
EDR_NHST = edr_nhst,
EDR_IHT = edr_iht,
EDR_GORIC = edr_goric,
EDR_BAIN = edr_bain))
}
###-----------------------------------------------------------------------------
# Simulation
###-----------------------------------------------------------------------------
res <- runSimulation(design = Design,
replications = 5,
generate = Generate,
analyse = Analyse,
summarise = Summarise)
View(res)
sim_results <- res
# Step 1 — Convert to long format
sim_long <- sim_results %>%
select(N, true_hypothesis, small.effect, cutoff, hypothesis,
EDR_NHST, EDR_IHT, EDR_GORIC, EDR_BAIN) %>%
pivot_longer(
cols = starts_with("EDR_"),
names_to = "Method",
values_to = "EDR"
) %>%
mutate(
Method = recode(Method,
EDR_NHST = "NHST",
EDR_IHT = "IHT",
EDR_GORIC = "GORIC",
EDR_BAIN = "BAIN"),
true_hypothesis = factor(true_hypothesis,
levels = c(0,1),
labels = c("Null is True", "Alternative is True")),
small.effect = factor(small.effect,
levels = c(0,1),
labels = c("Large Effect", "Small Effect")),
hypothesis = factor(hypothesis,
levels = c(0,1),
labels = c("Regular Cutoff", "Unusual Cutoff"))
)
# Step 2 — Plot with facets for all three conditions
ggplot(sim_long, aes(x = N, y = EDR, color = Method, group = Method)) +
stat_summary(fun = mean, geom = "line", size = 1) +
stat_summary(fun = mean, geom = "point", size = 2) +
facet_grid(true_hypothesis + hypothesis ~ small.effect) +
labs(
title = "Estimated Discovery Rates (EDR) Across Methods",
subtitle = "Faceted by Hypothesis Truth, Cutoff Type, and Effect Size",
x = "Sample Size (N)",
y = "EDR",
color = "Method"
) +
theme_minimal(base_size = 14)
### library ####
library(EffectLiteR)
library(restriktor)
library(tidyverse)
library(bain)
source("Data Generation.R")
source("EDR_function.R")
source("goric_preference function.R")
data <- generateData(N=24, hypothesis=1, small.effect = 0)
elrmod <- effectLite(
data = data,
y = "y",
x = "x",
k = "k",
z = "z",
method = "sem",
mimic="lm",             # since we use sem but mimic lm, we need to change other arguments default setting according to lm function
fixed.cell=TRUE,        # Mit sem Methode wäre FALSE default
fixed.z=TRUE,           # Mit sem Methode wäre FALSE deafult
homoscedasticity=TRUE,  # Mit sem Methode wäre FALSE deafult
test.stat = "Wald"
)
hypothesis = "adjmean0 <  adjmean1; adjmean1 < adjmean2"
hypothesis2 = "adjmean0 < adjmean1 < adjmean2"
effectLite_iht(constraints = "adjmean0 adjmean1 < adjmean2",
test="Wald",
object=elrmod)
effectLite_iht(constraints = "adjmean0 < adjmean1 < adjmean2",
test="Wald",
object=elrmod)
data <- generateData(N=600, hypothesis=1, small.effect = 0)
elrmod <- effectLite(
data = data,
y = "y",
x = "x",
k = "k",
z = "z",
method = "sem",
mimic="lm",             # since we use sem but mimic lm, we need to change other arguments default setting according to lm function
fixed.cell=TRUE,        # Mit sem Methode wäre FALSE default
fixed.z=TRUE,           # Mit sem Methode wäre FALSE deafult
homoscedasticity=TRUE,  # Mit sem Methode wäre FALSE deafult
test.stat = "Wald"
)
effectLite_iht(constraints = "adjmean0 < adjmean1 < adjmean2",
test="Wald",
object=elrmod)
effectLite_iht()?
?efffectLite_iht()
det(elrmod@results@vcov.def[parnames, parnames])
parnames <- c("adjmean0","adjmean1","adjmean2")
det(elrmod@results@vcov.def[parnames, parnames])
